# Faiza Khan
# Introduction to Programming with Python
# Project 2: Username and Password

print()

'''Code Summary:
This software application provides users with a convenient and efficient means to generate and verify their username and
password combinations. As part of this process, the application scrutinizes the entries to ensure they adhere to 
specific criteria, including character length requirements falling within the range of 5 to 10 characters. It checks 
that the entries commence without a numeric character and are completely free of any white spaces. Furthermore, the 
application undertakes a thorough comparison of both the username and password fields to guarantee that they are 
entirely unique from one another.
'''

'''Change Log:
# I Improved the user prompts
# I added color code for validation purposes
# Updated logic for smooth user interaction
# There is a validation to validate or invalidate all user entries color coded
'''


# Original Pseudocode for func. validate_input:
# Function name: validate_input
# Description: Takes a string and compares it against business rules for length and characters.
# Parameters: a string (user_data)
# Rules:
#   rule 1) length of string user_data greater than or equal to 5.
#   rule 2) length of string user_data less than or equal to 10.
#   rule 3) user_datas cannot start with a number.
#   rule 4) user_data cannot have any space characters.
# if any rule is false return 'false' for invalid
# else return 'true' for valid
# END of validate_input FUNCTION pseudocode
def validate_input(user_data):
    """validate_input generated by chat.ai through my pseudocode."""
    # Function to validate username and password to see if it matches rules
    # Rule 1: Check length >= 5
    if len(user_data) < 5:
        return False

    # Rule 2: Check length <= 10
    if len(user_data) > 10:
        return False

    # Rule 3: Check if it starts with a number
    if user_data[0].isdigit():
        return False

    # Rule 4: Check for spaces
    if ' ' in user_data:
        return False

    # All rules passed
    return True


# Original Pseudocode for func. compare_input:
# Function name: compare_inputs
# Description: Compares the uniqueness of two strings and returns it as false if the strings are not unique.
# Parameters: string (my_user_name), string (my_password)
# Rules:
# 1) if user_name == pass_word return 'false' for invalid
# 2) else return true for valid for unique strings.
# END compare_inputs FUNCTION pseudocode
def compare_inputs(my_username, my_password):
    """compare_input generated by chat.ai through my pseudocode."""
    # Function to compare username and password for uniqueness
    if my_username == my_password:
        return False  # Not unique

    return True  # Unique


# Original Prompts:
# Display Welcome Gesture: “Hello Welcome User!”
# Display Context: “Use this app to get strong username/password combinations.”
# Display: “These are the rules for input data:”
# Display Word Count: >= 5 characters and 11 max
# Display Restrictions: “You cannot start your username with a number or blank space.”
# Display Uniqueness: “Password must be different from the username(cannot match).”
# END of Pseudocode
# Modified User Prompts:
'''Improved, Updated, and Color Coded prompts'''
print("\033[4mHello and Welcome!\033[0m")
print("Use this app to set up strong combinations of username/passwords.")
print("\nRules For Your User/Passwords:")
print("\tMust be a minimum of 5 and maximum of 10 characters.")
print("\tYou cannot start your username with a number or blank space.")
print("\tPassword must be different than the username (cannot match).")
print("\nNow You May Create:")


# Original Prompt User and Validate the input:
# INPUT user_name = prompt user to enter a string for the username field
# while(user_name is not valid)
#  if needed prompt the user for the username
#  if validate_input(username == true)
#    INPUT pass_word = prompt user to enter a string for the password field
#    if validate_input(password == true)
#     if compare_inputs(username, password) print ("valid data found")
#    else (false unique message, ask for password again)
#   else (false password message, ask for password again)
#  else (false username message, ask for username again)
'''Validation checks'''
"""Chat.ai generated prompts for user/pass from pseudocode, personal modifications as well."""
# Coded prompt for username and validate:
username = input("\tEnter a Valid Username: ")
while not validate_input(username):
    print("\n\033[31mInvalid Username. \nPlease refer the rules to validate.\033[0m")  # Indication of invalid user
    username = input("\n\tPlease Enter a Valid Username: ")
# Prompt for password and validate
password = input("\tEnter a Valid Password: ")
while not validate_input(password) or not compare_inputs(username, password):
    if not validate_input(password):
        print("\n\033[31mInvalid Password. \nPlease refer the rules to validate.\033[0m")  # Indication of invalid pass
    else:
        print("\n\033[31mInvalid\033[0m")
        print("\033[31mPassword must be different from the username.\033[0m")  # Indication of invalid pass
    password = input("\n\tEnter a Valid Password: ")


# Display the final messages to User:
print("\nFinal Entries:")
print(f"\tUsername: {username} "
      f"\n\tPassword: {password} "
      f"\n\033[32mValidated\033[0m")  # Indication of valid pass\user
print("\nThank you for using this app!")
